package gestor.clases;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.util.ArrayList;
import java.util.Iterator;

import javax.swing.GroupLayout;
import javax.swing.GroupLayout.Alignment;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JMenu;
import javax.swing.JMenuBar;
import javax.swing.JMenuItem;
import javax.swing.JScrollPane;
import javax.swing.JTable;
import javax.swing.JTextField;
import javax.swing.table.DefaultTableModel;
import javax.swing.SwingConstants;

import java.sql.Date;
import java.sql.Time;
import java.util.ArrayList;
import javax.swing.LayoutStyle.ComponentPlacement;

/**
 *
 * @author 
 */
public class Interfaz extends javax.swing.JFrame {

	private static String idvendedor, idCliente, idProveedor; 
	private static int isadmin, valortotal;
	private static ArrayList<ItemTransaccion> itemsVenta;
	private static ArrayList<ItemTransaccion> itemsCompra;
	
    /**
     * Creates new form Interfaz
     */
    public Interfaz(String idvendedor, int isadmin) {
    	this.idvendedor = idvendedor; //Guarda el id del usuario que inició sesión
    	this.isadmin = isadmin; //Guarda si el usuario que inició sesión es un admin o un vendedor
    	setResizable(false);
        initComponents();
        
        itemsVenta = new ArrayList<ItemTransaccion>();
    	itemsCompra = new ArrayList<ItemTransaccion>();
    }
    
    public int getIsAdmin(){
    	return isadmin;
    }
    
    public String getIdVendedor(){
    	return idvendedor;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
    	
    	//
    	final int id_venta, id_compra;
		Conexion con = new Conexion();
		int esCompra = 3;
		int esVenta = 4; 
		id_compra = con.obtenerId(esCompra);
		id_venta = con.obtenerId(esVenta);
		con.cerrarConexion();
    	
    	System.out.println("El usuario identificado con id " + idvendedor + " ha iniciado sesión");
    	System.out.println(getIsAdmin());
    	setTitle("Gestor Comercial");
    	setSize(535,418);
        jMenuItem1 = new javax.swing.JMenuItem();
        jMenuItem2 = new javax.swing.JMenuItem();
        jMenuItem3 = new javax.swing.JMenuItem();
        jMenu1 = new javax.swing.JMenu();
        jPanel1 = new javax.swing.JPanel();
        jDesktopPane1 = new javax.swing.JDesktopPane();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jScrollPane5 = new javax.swing.JScrollPane();
        jTable5 = new javax.swing.JTable();
        panelContenedor = new javax.swing.JTabbedPane();
        panelCompra = new javax.swing.JPanel();
        panelInventario = new javax.swing.JPanel();
        lblNombreProducto_Inventario = new javax.swing.JLabel();
        lblNombreProducto_Inventario.setBounds(20, 30, 115, 25);
        tfNombreProducto_Inventario = new javax.swing.JTextField();
        tfNombreProducto_Inventario.setBounds(143, 30, 100, 25);
        btnConsultarProducto_Inventario = new javax.swing.JButton();
        btnConsultarProducto_Inventario.addActionListener(new ActionListener() {
        	public void actionPerformed(ActionEvent e) {
        		//Limpia la tabla
        		int numfilas = modelo.getRowCount()-1;
        		for(int i=numfilas; i>=0; i--) modelo.removeRow(i);
        		
        		ArrayList<ItemConsulta> consulta = new ArrayList<ItemConsulta>();
        		ItemConsulta filaConsulta;
        		String nomconsulta = tfNombreProducto_Inventario.getText();
        		
        		//Hace la conexión a la base de datos
        		Conexion con = new Conexion();
        		consulta = con.generarConsultaInventario(nomconsulta);
        		con.cerrarConexion();
        		
        		//Usa Iterator para cada leer cada objeto ItemConsulta del arraylist
        		Iterator it = consulta.iterator();
        		while(it.hasNext()){
        			Object [] fila = new Object[6];
        			filaConsulta = (ItemConsulta) it.next();
        			fila[0] = filaConsulta.getIdProducto();
        			fila[1] = filaConsulta.getNombre();
        			fila[2] = filaConsulta.getProductor();
        			fila[3] = filaConsulta.getPrecio();
        			fila[4] = filaConsulta.getCantidad();
        			fila[5] = filaConsulta.getVencimiento();
        			modelo.addRow(fila);
        		}
        	}
        });
        
        
        btnConsultarProducto_Inventario.setBounds(268, 25, 150, 35);
        jScrollPaneInventario = new javax.swing.JScrollPane();
        jScrollPaneInventario.setBounds(20, 100, 600, 150);
        modelo = new DefaultTableModel();
        jTableInventario = new javax.swing.JTable(modelo);
        panelContabilidad = new javax.swing.JPanel();
        lblVentas_Contabilidad = new javax.swing.JLabel();
        lblVentas_Contabilidad.setBounds(39, 21, 100, 25);
        lblCompra_Contabilidad = new javax.swing.JLabel();
        lblCompra_Contabilidad.setBounds(39, 196, 100, 25);

        jMenuItem1.setText("jMenuItem1");

        jMenuItem2.setText("jMenuItem2");

        jMenuItem3.setText("jMenuItem3");

        jMenu1.setText("jMenu1");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 100, Short.MAX_VALUE)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 100, Short.MAX_VALUE)
        );

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane1.setViewportView(jTable1);

        jTable5.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane5.setViewportView(jTable5);

        setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
        
        JLabel lblIdCompra_Compra = new JLabel();
        lblIdCompra_Compra.setBounds(43, 45, 80, 25);
        lblIdCompra_Compra.setText("Id compra:");
        
        JLabel lblIdProducto_Compra = new JLabel();
        lblIdProducto_Compra.setBounds(43, 68, 80, 25);
        lblIdProducto_Compra.setText("Id producto:");
        
        tfIdProducto_Compra = new JTextField();
        tfIdProducto_Compra.setBounds(163, 68, 100, 25);
        
        tfCantidad_Compra = new JTextField();
        tfCantidad_Compra.setBounds(501, 21, 100, 25);
        
        JLabel lblCantidad_Compra = new JLabel();
        lblCantidad_Compra.setBounds(381, 21, 80, 25);
        lblCantidad_Compra.setText("Cantidad:");
        
        JButton btnAgregarProducto_Compra = new JButton();
        btnAgregarProducto_Compra.addActionListener(new ActionListener() {
        	public void actionPerformed(ActionEvent e) {
        		boolean existeProducto;
        		String idProducto = tfIdProducto_Compra.getText();
        		int cantidad = Integer.parseInt(tfCantidad_Compra.getText());
        		float precioUnitario = Float.parseFloat(tfPrecioUnidad_Compra.getText());
        		Date fecha = Date.valueOf(tfFechaVencimiento_Compra.getText());
        		float precioTotal = precioUnitario * cantidad;
        		Conexion con = new Conexion();
        		existeProducto = con.existeProducto(Integer.valueOf(idProducto));
        		con.cerrarConexion();
        		if(existeProducto){
	        		String nombreProducto = Producto.getNombreProducto(idProducto);
	        		
	        		ItemTransaccion itemCompra = new ItemTransaccion(idProducto, nombreProducto, cantidad, fecha, precioUnitario, precioTotal);
	        		boolean seAgrego = false;
	        		seAgrego = itemsCompra.add(itemCompra);
	        		
	        		Object [] fila = new Object[6];
	        		fila[0] = itemCompra.getIdProducto();
	        		fila[1] = itemCompra.getNombreProducto();
	        		fila[2] = itemCompra.getCantidad();
	        		fila[3] = itemCompra.getFechaVencimiento();
	        		fila[4] = itemCompra.getPrecioUnitario();
	        		fila[5] = itemCompra.getPrecioTotal();
	        		modeloCompra.addRow(fila);
	        		valortotal+= itemCompra.getPrecioTotal();
	        		tfValorTotal_Compra.setText(String.valueOf(valortotal));
	        		if (seAgrego) System.out.println("ÍTEM/PRODUCTO AGREGADO EXITOSAMENTE!");
	        		else System.out.println("FATAL! -> NO SE AGREGÓ EL PRODUCTO!");
	         		tfIdProducto_Compra.setText("");
	        		tfCantidad_Compra.setText("");
	        		tfPrecioUnidad_Compra.setText("");
	        		tfFechaVencimiento_Compra.setText("");
        		}else System.out.println("PARCERO, EL PRODUCTO NO EXISTE");
        	}
        });

        btnAgregarProducto_Compra.setBounds(41, 105, 220, 35);
        btnAgregarProducto_Compra.setText("Agregar producto");
        
        JLabel lblProductosAComprar_Compra = new JLabel();
        lblProductosAComprar_Compra.setBounds(43, 176, 125, 25);
        lblProductosAComprar_Compra.setText("Productos a comprar:");
        
        JButton btnRealizarCompra = new JButton();
        btnRealizarCompra.addActionListener(new ActionListener() {
        	public void actionPerformed(ActionEvent e) {
        		String proveed = idProveedor;
        		ItemTransaccion item;
        		int idRegistroInventario, cantidadexistente;
        		float precioVenta, saldo, totalCompra;
        		boolean actualizarInventario, actualizarProductoCompra, actualizarCompra;
        		Date fechaActual;
        		Time horaActual;
        		//ACA ESTÁ LA MAGIA (Y)
        		Iterator it = itemsCompra.iterator();
        		while(it.hasNext()){
        			Conexion con = new Conexion();
        			item = (ItemTransaccion) it.next();
        			System.out.println(item.getIdProducto()+ " " + item.getPrecioUnitario() + " " + item.getFechaVencimiento());
        			idRegistroInventario = con.actualizarOCrearNuevoRegistroInventario(Integer.parseInt(item.getIdProducto()), 
        					item.getPrecioUnitario(), item.getFechaVencimiento()); //obtiene el IdRegistroInventario
        			System.out.println("||||||System. idRegistroInventario|||||");
        			System.out.println(idRegistroInventario);
        			cantidadexistente = con.sumarCantidadExistenteInventario(idRegistroInventario); //si hay cantidad existentes las guarda, si no = 0
        			System.out.println("LA CANTIDAD EXISTENTE ES: " +cantidadexistente);
        			precioVenta = con.obtenerPrecioVentaInventario(idRegistroInventario);
        			System.out.println("EL PRECIO DE VENTA ES: " +precioVenta);
        			Inventario inventario = new Inventario(idRegistroInventario, Integer.parseInt(item.getIdProducto()),
        					(item.getCantidad()+cantidadexistente), item.getFechaVencimiento(), item.getPrecioUnitario(),
        		     		precioVenta);
        			System.out.println("IDREGISTROINVENTARIO: "+idRegistroInventario);
        			System.out.println("IDPRODUCTO: "+Integer.parseInt(item.getIdProducto()));
        			System.out.println("CANTIDAD: "+(item.getCantidad()+cantidadexistente));
        			System.out.println("FECHA VENC: "+item.getFechaVencimiento());
        			System.out.println("PRECIO COMPRA: "+item.getPrecioUnitario());
        			System.out.println("PRECIO VENTA: "+precioVenta);
        			
        			//la BD inventario se actualiza acá
        			actualizarInventario = con.actualizarInventario(inventario);
        			if (actualizarInventario) System.out.println("SE ACTUALIZÓ EL INVENTARIO CORRECTAMENTE");
        			else System.out.println("NO ACTUALIZÓ INVENTARIO, PASÓ ALGO :s");
        			
        			//la BD producto_compra se actualiza acá.
        			actualizarProductoCompra = con.actualizarProductoCompra(id_compra, Integer.parseInt(item.getIdProducto()), item.getCantidad());
        			if (actualizarProductoCompra) System.out.println("SE ACTUALIZÓ PRODUCTO_COMPRA CORRECTAMENTE");
        			else System.out.println("NO ACTUALIZÓ PRODUCTO_COMPRA, PASÓ ALGO :s");
        			con.cerrarConexion();
        		}
        		// la BD compra se guarda despues del iterator
        		fechaActual = Controlador.fechaSistema();
				horaActual = Controlador.horaSistema();
				totalCompra = Float.valueOf(tfValorTotal_Compra.getText());
				saldo = totalCompra - Float.valueOf(tfValorCancelado_Compra.getText());
				System.out.println("id_compra: "+id_compra);
    			System.out.println("id_vendedor: "+idvendedor);
    			System.out.println("idproveedor: "+proveed);
    			System.out.println("total compra: "+totalCompra);
    			System.out.println("fecha actual: "+fechaActual);
    			System.out.println("hora actual: "+horaActual);
    			System.out.println("saldo: "+saldo);
        		Compra compra = new Compra(id_compra, idvendedor, proveed, totalCompra, fechaActual, horaActual, saldo);
        		System.out.println("COÑOOOO: "+compra.getIdProveedor());
        		Conexion con = new Conexion();
        		actualizarCompra = con.actualizarCompra(compra);
        		con.cerrarConexion();
        		if (actualizarCompra) System.out.println("SE ACTUALIZÓ COMPRA CORRECTAMENTE");
    			else System.out.println("NO ACTUALIZÓ COMPRA, PASÓ ALGO :s");
        		tfIdProducto_Compra.setText("");
        		tfCantidad_Compra.setText("");
        		tfPrecioUnidad_Compra.setText("");
        		tfFechaVencimiento_Compra.setText("");
        		tfValorCancelado_Compra.setText("0");
        		tfValorTotal_Compra.setText("");
        		Conexion uno = new Conexion();
        		//final int id_venta, esVenta = 4;
        		final int id_compra, esCompra = 3;
        		id_compra = uno.obtenerId(esCompra);
        		//id_venta = uno.obtenerId(esVenta);
        		uno.cerrarConexion();
        		lblCompra_compra.setText(String.valueOf(id_venta));
        	}
        });
        btnRealizarCompra.setBounds(43, 358, 150, 30);
        btnRealizarCompra.setText("Realizar compra");

        panelContenedor.addTab("Compra", panelCompra);
        panelCompra.setLayout(null);
        panelCompra.add(lblIdCompra_Compra);
        panelCompra.add(lblIdProducto_Compra);
        panelCompra.add(tfIdProducto_Compra);
        panelCompra.add(lblCantidad_Compra);
        panelCompra.add(tfCantidad_Compra);
        panelCompra.add(btnAgregarProducto_Compra);
        panelCompra.add(lblProductosAComprar_Compra);
        panelCompra.add(btnRealizarCompra);
        
        jScrollPaneCompra = new JScrollPane();
        jScrollPaneCompra.setBounds(43, 202, 600, 150);
        panelCompra.add(jScrollPaneCompra);
        
        modeloCompra = new DefaultTableModel();
        jTableCompra = new JTable(modeloCompra);
  
        modeloCompra.addColumn("Id");
        modeloCompra.addColumn("Nombre");
        modeloCompra.addColumn("Cantidad");
        modeloCompra.addColumn("Fecha Vencimiento");
        modeloCompra.addColumn("Precio Unitario");
        modeloCompra.addColumn("Precio Total");
        jScrollPaneCompra.setViewportView(jTableCompra);
        
        tfValorTotal_Compra = new JTextField();
        tfValorTotal_Compra.setBounds(543, 358, 100, 25);
        panelCompra.add(tfValorTotal_Compra);
        
        lblValorTotal_Compra = new JLabel();
        lblValorTotal_Compra.setText("Valor total:");
        lblValorTotal_Compra.setBounds(453, 358, 80, 25);
        panelCompra.add(lblValorTotal_Compra);
        
        tfValorCancelado_Compra = new JTextField();
        tfValorCancelado_Compra.setText("0");
        tfValorCancelado_Compra.setBounds(321, 358, 100, 25);
        panelCompra.add(tfValorCancelado_Compra);
        
        lblValorCancelado_Compra = new JLabel();
        lblValorCancelado_Compra.setText("Valor cancelado:");
        lblValorCancelado_Compra.setBounds(221, 358, 100, 25);
        panelCompra.add(lblValorCancelado_Compra);
        
        JButton btnRegistrarProveedor_Compra = new JButton("Registrar proveedor");
        btnRegistrarProveedor_Compra.addMouseListener(new MouseAdapter() {
        	@Override
        	public void mousePressed(MouseEvent arg0) {
        		Interfaz_RegistrarProveedor interfazRegProv = new Interfaz_RegistrarProveedor();
        		interfazRegProv.main(null);
        	}
        });
        btnRegistrarProveedor_Compra.addActionListener(new ActionListener() {
        	public void actionPerformed(ActionEvent e) {
        		//String idCliente, idProveedor;
        	}
        });

        btnRegistrarProveedor_Compra.setBounds(41, 21, 222, 25);
        panelCompra.add(btnRegistrarProveedor_Compra);
        
        lblCompra_compra = new JLabel("");
        lblCompra_compra.setBounds(173, 45, 100, 25);
        panelCompra.add(lblCompra_compra);
        lblCompra_compra.setText(String.valueOf(id_compra));
        
        JLabel lblFechaVencimiento = new JLabel();
        lblFechaVencimiento.setText("Fecha vencimiento:");
        lblFechaVencimiento.setBounds(381, 69, 100, 25);
        panelCompra.add(lblFechaVencimiento);
        
        JLabel lblPrecio = new JLabel();
        lblPrecio.setText("Precio unidad:");
        lblPrecio.setBounds(381, 44, 100, 25);
        panelCompra.add(lblPrecio);
        
        tfPrecioUnidad_Compra = new JTextField();
        tfPrecioUnidad_Compra.setBounds(501, 44, 100, 25);
        panelCompra.add(tfPrecioUnidad_Compra);
        
        tfFechaVencimiento_Compra = new JTextField();
        tfFechaVencimiento_Compra.setBounds(501, 68, 100, 25);
        panelCompra.add(tfFechaVencimiento_Compra);
        
        lblNombreProducto_Inventario.setText("Nombre producto:");

        tfNombreProducto_Inventario.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField7ActionPerformed(evt);
            }
        });
        jTableVenta = new javax.swing.JTable();
        
        
        modeloVenta = new DefaultTableModel();
  
        modeloVenta.addColumn("Id");
        modeloVenta.addColumn("Nombre");
        modeloVenta.addColumn("Cantidad");
        modeloVenta.addColumn("Fecha Vencimiento");
        modeloVenta.addColumn("Precio Unitario");
        modeloVenta.addColumn("Precio Total");
        
                /*jTableVenta.setModel(new DefaultTableModel(
                	new Object[][] {
                		{null, null, null, null, null},
                		{null, null, null, null, null},
                		{null, null, null, null, null},
                		{null, null, null, null, null},
                		{null, null, null, null, null},
                		{null, null, null, null, null},
                	},
                	new String[] {
                		"Id", "Producto", "Cantidad", "Precio Unitario", "Precio Total"
                	}
                ));
                jTableVenta.getColumnModel().getColumn(0).setPreferredWidth(50);
                jTableVenta.getColumnModel().getColumn(1).setPreferredWidth(140);
                jTableVenta.getColumnModel().getColumn(2).setPreferredWidth(55);
                jTableVenta.getColumnModel().getColumn(3).setPreferredWidth(90);
                jTableVenta.getColumnModel().getColumn(4).setPreferredWidth(90);*/

        btnConsultarProducto_Inventario.setText("Consultar");
        
        //TABLA DE INVENTARIO
        modelo.addColumn("Id Producto");
	    modelo.addColumn("Nombre");
	    modelo.addColumn("Productor");
	    modelo.addColumn("Precio Unitario");
	    modelo.addColumn("Existencias");
	    modelo.addColumn("Vencimiento");
        panelVenta = new javax.swing.JPanel();
        jScrollPaneVenta = new javax.swing.JScrollPane();
        jScrollPaneVenta.setBounds(43, 205, 600, 150);
        lblIdProducto_Venta = new javax.swing.JLabel();
        lblIdProducto_Venta.setBounds(43, 71, 80, 25);
        tfIdProducto_Venta = new javax.swing.JTextField();
        tfIdProducto_Venta.setBounds(163, 71, 100, 25);
        lblCantidad_Venta = new javax.swing.JLabel();
        lblCantidad_Venta.setBounds(43, 94, 80, 25);
        tfCantidad_Venta = new javax.swing.JTextField();
        tfCantidad_Venta.setBounds(163, 95, 100, 25);
        lblProductosAVender = new javax.swing.JLabel();
        lblProductosAVender.setBounds(43, 179, 125, 25);
        btnAgregarProducto_Venta = new javax.swing.JButton();
        btnAgregarProducto_Venta.setBounds(43, 122, 220, 35);
        btnRealizarVenta = new javax.swing.JButton();
        btnRealizarVenta.addActionListener(new ActionListener() {
        	public void actionPerformed(ActionEvent arg0) {
        		////////////////////////// LA MAGIA DE LAS VENTAS //////////////////////
        		ItemTransaccion item;
        		int idRegistroInventario, cantidadexistente;
        		float precioCompra, totalVenta;
        		boolean actualizarInventario, actualizarProductoVenta, actualizarCompra;
        		Date fechaActual;
        		Time horaActual;
        		//ACA ESTÁ LA MAGIA (Y)
        		Iterator it = itemsVenta.iterator();
        		while(it.hasNext()){
        			Conexion con = new Conexion();
        			item = (ItemTransaccion) it.next();
        			System.out.println(item.getIdProducto()+ " " + item.getPrecioUnitario() + " " + item.getFechaVencimiento());
        			
        			//Nuevo método
        			idRegistroInventario = con.escogerProductoAVender(Integer.valueOf(item.getIdProducto()));
        			System.out.println(idRegistroInventario);
        			//Otro método para obtener registro inventario
        			//idRegistroInventario = con.actualizarOCrearNuevoRegistroInventario(Integer.parseInt(item.getIdProducto()), 
        			//		item.getPrecioUnitario(), item.getFechaVencimiento()); //obtiene el IdRegistroInventario
        			
        			//Mismo método Compra
        			cantidadexistente = con.sumarCantidadExistenteInventario(idRegistroInventario); //si hay cantidad existentes las guarda, si no = 0
        			System.out.println("LA CANTIDAD EXISTENTE ES: " +cantidadexistente);

        			precioCompra = con.obtenerPrecioCompraInventario(idRegistroInventario);
        			System.out.println("EL PRECIO DE COMPRA ES: " +precioCompra);
        			Inventario inventario = new Inventario(idRegistroInventario, Integer.parseInt(item.getIdProducto()),
        					(cantidadexistente-item.getCantidad()), item.getFechaVencimiento(), precioCompra , item.getPrecioUnitario());
        			System.out.println("IDREGISTROINVENTARIO: "+idRegistroInventario);
        			System.out.println("IDPRODUCTO: "+Integer.parseInt(item.getIdProducto()));
        			System.out.println("CANTIDAD: "+(item.getCantidad()+cantidadexistente));
        			System.out.println("FECHA VENC: "+item.getFechaVencimiento());
        			System.out.println("PRECIO VENTA: "+item.getPrecioUnitario());
        			System.out.println("PRECIO COMPRA: "+precioCompra);
        			
        			//la BD inventario se actualiza acá
        			actualizarInventario = con.actualizarInventario(inventario);
        			if (actualizarInventario) System.out.println("SE ACTUALIZÓ EL INVENTARIO CORRECTAMENTE");
        			else System.out.println("NO ACTUALIZÓ INVENTARIO, PASÓ ALGO :s");
        			
        			//la BD producto_ se actualiza acá.
        			actualizarProductoVenta = con.actualizarProductoVenta(id_venta, Integer.parseInt(item.getIdProducto()), item.getCantidad());
        			if (actualizarProductoVenta) System.out.println("SE ACTUALIZÓ PRODUCTO_COMPRA CORRECTAMENTE");
        			else System.out.println("NO ACTUALIZÓ PRODUCTO_COMPRA, PASÓ ALGO :s");
        			con.cerrarConexion();
        		}
        		// la BD compra se guarda despues del iterator
        		fechaActual = Controlador.fechaSistema();
				horaActual = Controlador.horaSistema();
				totalVenta = Float.valueOf(tfValorTotal_Venta.getText());
				System.out.println("id_compra: "+id_venta);
    			System.out.println("id_vendedor: "+idvendedor);
    			System.out.println("idcliente: "+idCliente);
    			System.out.println("total compra: "+totalVenta);
    			System.out.println("fecha actual: "+fechaActual);
    			System.out.println("hora actual: "+horaActual);
    			
        		Venta venta = new Venta(id_venta, idvendedor, idCliente, totalVenta, fechaActual, horaActual);
        		Conexion con = new Conexion();
        		actualizarCompra = con.actualizarVenta(venta);
        		con.cerrarConexion();
        		if (actualizarCompra) System.out.println("SE ACTUALIZÓ COMPRA CORRECTAMENTE");
    			else System.out.println("NO ACTUALIZÓ COMPRA, PASÓ ALGO :s");
        		tfIdProducto_Venta.setText("");
        		tfCantidad_Venta.setText("");
        		tfValorTotal_Venta.setText("");
        		Conexion uno = new Conexion();
        		final int id_venta, esVenta = 4;
        		//final int id_compra, esCompra = 3;
        		//id_compra = uno.obtenerId(esCompra);
        		id_venta = uno.obtenerId(esVenta);
        		uno.cerrarConexion();
        		lblVenta_venta.setText(String.valueOf(id_venta));
        	}
        });
        btnRealizarVenta.setBounds(43, 361, 150, 30);
        jTableVenta = new JTable(modeloVenta);
        jScrollPaneVenta.setViewportView(jTableVenta);
        jScrollPaneVenta.setViewportView(jTableVenta);
        
                lblIdProducto_Venta.setText("Id producto:");
                
                        tfIdProducto_Venta.addActionListener(new java.awt.event.ActionListener() {
                            public void actionPerformed(java.awt.event.ActionEvent evt) {
                                jTextField1ActionPerformed(evt);
                            }
                        });
                        
                                lblCantidad_Venta.setText("Cantidad:");
                                
                                        tfCantidad_Venta.addActionListener(new java.awt.event.ActionListener() {
                                            public void actionPerformed(java.awt.event.ActionEvent evt) {
                                                jTextField2ActionPerformed(evt);
                                            }
                                        });
                                        
                                                lblProductosAVender.setText("Productos a vender:");
                                                
                                                        btnAgregarProducto_Venta.setText("Agregar producto");
                                                        btnAgregarProducto_Venta.addActionListener(new java.awt.event.ActionListener() {
                                                            public void actionPerformed(java.awt.event.ActionEvent evt) {
                                                                //jButton1ActionPerformed(evt);
                                                            	boolean existeProducto; 
                                                            	int hayCantidades;
                                                            	//ArrayList<Integer> hayCantidades;
                                                            	String idProducto = tfIdProducto_Venta.getText();
                                                        		int cantidad = Integer.parseInt(tfCantidad_Venta.getText());
                                                        		
                                                        		Conexion con = new Conexion();
                                                        		existeProducto = con.existeProducto(Integer.valueOf(idProducto));
                                                        		hayCantidades = con.hayCantidades(Integer.valueOf(idProducto));
                                                        		con.cerrarConexion();
                                                        		if(existeProducto && hayCantidades>0){
	                                                                		String nombreProducto = Producto.getNombreProducto(idProducto);
	                                                                		// TODO En las dos siguientes llamadas de métodos estáticos de 
	                                                                		// Inventario se realizan consultas a la tabla inventario en la
	                                                                		// BD. Dicha tabla puede tener varios registros con el mismo
	                                                                		// id de producto. TENEMOS QUE validar que nos consulte y trabaje
	                                                                		// con el de fecha de vencimiento más próxima. En este caso, sin
	                                                                		// haberse hecho esta validación al parecer trabaja con el primer
	                                                                		// registro que coincide con el id, y eso está bien por ahora.
	                                                                		float precioUnitario = Inventario.getPrecioDeVenta(idProducto);
	                                                                		Date fecha = Inventario.getFechaVencimiento(idProducto);
	                                                                		
	                                                                		float precioTotal = precioUnitario * cantidad;
	                                                                		
	                                                                		ItemTransaccion itemVenta = new ItemTransaccion(idProducto, nombreProducto, cantidad, fecha, precioUnitario, precioTotal);
	                                                                		boolean seAgrego = false;
	                                                                		seAgrego = itemsVenta.add(itemVenta);
	                                                                		
	                                                                		Object [] fila = new Object[6];
	                                                                		fila[0] = itemVenta.getIdProducto();
	                                                                		fila[1] = itemVenta.getNombreProducto();
	                                                                		fila[2] = itemVenta.getCantidad();
	                                                                		fila[3] = itemVenta.getFechaVencimiento();
	                                                                		fila[4] = itemVenta.getPrecioUnitario();
	                                                                		fila[5] = itemVenta.getPrecioTotal();
	                                                                		modeloVenta.addRow(fila);
	                                                                		valortotal+= itemVenta.getPrecioTotal();
	                                                                		tfValorTotal_Venta.setText(String.valueOf(valortotal));
	                                                            
	                                                                		if (seAgrego) System.out.println("ÍTEM/PRODUCTO AGREGADO EXITOSAMENTE!");
	                                                                		else System.out.println("FATAL! -> NO SE AGREGÓ EL PRODUCTO!");
                                                        		}else System.out.println("PARCERO, EL PRODUCTO NO EXISTE O ESTÁ AGOTADO");
                                                            }
                                                        });
                                                        
                                                                btnRealizarVenta.setText("Realizar venta");
                                                                
                                                                JLabel lblIdVenta = new JLabel();
                                                                lblIdVenta.setBounds(43, 48, 80, 25);
                                                                lblIdVenta.setText("Id venta:");
                                                                
                                                                        panelContenedor.addTab("Venta", panelVenta);
                                                                        panelVenta.setLayout(null);
                                                                        panelVenta.add(lblIdVenta);
                                                                        panelVenta.add(lblIdProducto_Venta);
                                                                        panelVenta.add(tfIdProducto_Venta);
                                                                        panelVenta.add(lblCantidad_Venta);
                                                                        panelVenta.add(tfCantidad_Venta);
                                                                        panelVenta.add(lblProductosAVender);
                                                                        panelVenta.add(jScrollPaneVenta);
                                                                        panelVenta.add(btnAgregarProducto_Venta);
                                                                        panelVenta.add(btnRealizarVenta);
                                                                        
                                                                        tfValorTotal_Venta = new JTextField();
                                                                        tfValorTotal_Venta.setBounds(543, 361, 100, 25);
                                                                        panelVenta.add(tfValorTotal_Venta);
                                                                        
                                                                        JLabel lblValorTotal_Venta = new JLabel();
                                                                        lblValorTotal_Venta.setText("Valor total:");
                                                                        lblValorTotal_Venta.setBounds(453, 361, 80, 25);
                                                                        panelVenta.add(lblValorTotal_Venta);
                                                                        
                                                                        JButton btnRegistrarCliente_Venta = new JButton("Registrar cliente");
                                                                        btnRegistrarCliente_Venta.addMouseListener(new MouseAdapter() {
                                                                        	@Override
                                                                        	public void mousePressed(MouseEvent e) {
                                                                        		Interfaz_RegistrarCliente interfazRegClie = new Interfaz_RegistrarCliente();
                                                                        		interfazRegClie.main(null);
                                                                        	}
                                                                        });
                                                                        btnRegistrarCliente_Venta.addActionListener(new ActionListener() {
                                                                        	public void actionPerformed(ActionEvent arg0) {
                                                                        	}
                                                                        });
                                                                        btnRegistrarCliente_Venta.setBounds(41, 22, 222, 25);
                                                                        panelVenta.add(btnRegistrarCliente_Venta);
                                                                        
                                                                        lblVenta_venta = new JLabel("");
                                                                        lblVenta_venta.setBounds(168, 48, 100, 25);
                                                                        panelVenta.add(lblVenta_venta);
                                                                        lblVenta_venta.setText(String.valueOf(id_venta));
        jScrollPaneInventario.setViewportView(jTableInventario);

        panelContenedor.addTab("Inventario", panelInventario);
        panelInventario.setLayout(null);
        panelInventario.add(lblNombreProducto_Inventario);
        panelInventario.add(tfNombreProducto_Inventario);
        panelInventario.add(btnConsultarProducto_Inventario);
        panelInventario.add(jScrollPaneInventario);
        
        JButton btnProductosAVencerse = new JButton("Productos a vencerse");
        btnProductosAVencerse.setBounds(20, 264, 170, 35);
        panelInventario.add(btnProductosAVencerse);
        
        JButton btnProductosAAcabarse = new JButton("Productos a acabarse");
        btnProductosAAcabarse.setBounds(20, 299, 170, 35);
        panelInventario.add(btnProductosAAcabarse);

        lblVentas_Contabilidad.setText("VENTAS:");

        lblCompra_Contabilidad.setText("COMPRAS:");

        panelContenedor.addTab("Contabilidad", panelContabilidad);
        panelContabilidad.setLayout(null);
        panelContabilidad.add(lblCompra_Contabilidad);
        panelContabilidad.add(lblVentas_Contabilidad);
        
        JScrollPane jScrollPaneVentas_Contabilidad = new JScrollPane();
        jScrollPaneVentas_Contabilidad.setBounds(49, 45, 560, 140);
        panelContabilidad.add(jScrollPaneVentas_Contabilidad);
        
        final DefaultTableModel VentaContabilidad = new DefaultTableModel();
        jTableVentas_Contabilidad = new JTable(VentaContabilidad);
  
        VentaContabilidad.addColumn("Id venta");
        VentaContabilidad.addColumn("Id vendedor");
        VentaContabilidad.addColumn("Id cliente");
        VentaContabilidad.addColumn("Total venta");
        VentaContabilidad.addColumn("Fecha venta");
        VentaContabilidad.addColumn("Hora venta");
        jScrollPaneVentas_Contabilidad.setViewportView(jTableVentas_Contabilidad);
        
        JScrollPane jScrollPaneCompras_Contabilidad = new JScrollPane();
        jScrollPaneCompras_Contabilidad.setBounds(49, 222, 560, 140);
        panelContabilidad.add(jScrollPaneCompras_Contabilidad);
        
        final DefaultTableModel CompraContabilidad = new DefaultTableModel();
        jTableCompras_Contabilidad = new JTable(CompraContabilidad);
        
        CompraContabilidad.addColumn("Id compra");
        CompraContabilidad.addColumn("Id vendedor");
        CompraContabilidad.addColumn("Id proveedor");
        CompraContabilidad.addColumn("Total compra");
        CompraContabilidad.addColumn("Fecha compra");
        CompraContabilidad.addColumn("Hora compra");
        CompraContabilidad.addColumn("Saldo");
        jScrollPaneCompras_Contabilidad.setViewportView(jTableCompras_Contabilidad);
        
        JButton btnActualizarVentas_Contabilidad = new JButton("Actualizar");
        btnActualizarVentas_Contabilidad.addActionListener(new ActionListener() {
        	public void actionPerformed(ActionEvent e) {
        		//Limpia la tabla
        		int numfilas = VentaContabilidad.getRowCount()-1;
        		for(int i=numfilas; i>=0; i--) VentaContabilidad.removeRow(i);
        		
        		ArrayList<Venta> venta = new ArrayList<Venta>();
        		Venta itemVenta;
        		
        		//Hace la conexión a la base de datos
        		Conexion con = new Conexion();
        		venta = con.generarConsultaVenta();
        		con.cerrarConexion();
        		
        		//Usa Iterator para cada leer cada objeto ItemConsulta del arraylist
        		Iterator it = venta.iterator();
        		while(it.hasNext()){
        			Object [] fila = new Object[6];
        			itemVenta = (Venta) it.next();
        			fila[0] = itemVenta.getIdVenta();
        			fila[1] = itemVenta.getIdVendedor();
        			fila[2] = itemVenta.getIdCliente();
        			fila[3] = itemVenta.getTotalVenta();
        			fila[4] = itemVenta.getFechaVenta();
        			fila[5] = itemVenta.getHoraVenta();
        			VentaContabilidad.addRow(fila);
        		}
        	}
        });
        btnActualizarVentas_Contabilidad.setBounds(520, 22, 89, 23);
        panelContabilidad.add(btnActualizarVentas_Contabilidad);
        
        JButton btnActualizarCompras_Contabilidad = new JButton("Actualizar");
        btnActualizarCompras_Contabilidad.addActionListener(new ActionListener() {
        	public void actionPerformed(ActionEvent e) {
        		//Limpia la tabla
        		int numfilas = CompraContabilidad.getRowCount()-1;
        		for(int i=numfilas; i>=0; i--) CompraContabilidad.removeRow(i);
        		
        		ArrayList<Compra> compra = new ArrayList<Compra>();
        		Compra itemCompra;
        		
        		//Hace la conexión a la base de datos
        		Conexion con = new Conexion();
        		compra = con.generarConsultaCompra();
        		con.cerrarConexion();
        		
        		//Usa Iterator para cada leer cada objeto ItemConsulta del arraylist
        		Iterator it = compra.iterator();
        		while(it.hasNext()){
        			Object [] fila = new Object[7];
        			itemCompra = (Compra) it.next();
        			fila[0] = itemCompra.getIdCompra();
        			fila[1] = itemCompra.getIdVendedor();
        			fila[2] = itemCompra.getIdProveedor();
        			fila[3] = itemCompra.getTotalCompra();
        			fila[4] = itemCompra.getFechaCompra();
        			fila[5] = itemCompra.getHoraCompra();
        			fila[6] = itemCompra.getSaldo();
        			CompraContabilidad.addRow(fila);
        		}
        	}
        });
        btnActualizarCompras_Contabilidad.setBounds(520, 197, 89, 23);
        panelContabilidad.add(btnActualizarCompras_Contabilidad);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        layout.setHorizontalGroup(
        	layout.createParallelGroup(Alignment.LEADING)
        		.addComponent(panelContenedor, GroupLayout.DEFAULT_SIZE, 684, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
        	layout.createParallelGroup(Alignment.LEADING)
        		.addComponent(panelContenedor, GroupLayout.DEFAULT_SIZE, 469, Short.MAX_VALUE)
        );
        getContentPane().setLayout(layout);

        pack();
        
        JMenuBar barraMenuPrincipal = new JMenuBar();
        setJMenuBar(barraMenuPrincipal);
        
        JMenu menuArchivo = new JMenu("Archivo");
        barraMenuPrincipal.add(menuArchivo);
        
        JMenuItem menuSalir = new JMenuItem("Salir");
        menuSalir.addMouseListener(new MouseAdapter() {
        	@Override
        	public void mousePressed(MouseEvent e) {
        		System.exit(0);
        	}
        });
        menuArchivo.add(menuSalir);
        
        JMenu menuOpciones = new JMenu("Opciones");
        barraMenuPrincipal.add(menuOpciones);
        
        JMenuItem menuCrear = new JMenuItem("Crear");
        menuCrear.addMouseListener(new MouseAdapter() {
        	@Override
        	public void mousePressed(MouseEvent e) {
        		Interfaz_Crear interfaz = new Interfaz_Crear();
        		interfaz.main(null);
        	}
        });
        menuOpciones.add(menuCrear);
        
        JMenuItem menuModificar = new JMenuItem("Modificar");
        menuModificar.addMouseListener(new MouseAdapter() {
        	@Override
        	public void mousePressed(MouseEvent arg0) {
        		Interfaz_Modificar interfaz = new Interfaz_Modificar();
        		interfaz.main(null);
        	}
        });
        menuOpciones.add(menuModificar);
        
        JMenu menuAyuda = new JMenu("Ayuda");
        barraMenuPrincipal.add(menuAyuda);
    }// </editor-fold>//GEN-END:initComponents

    /**
     * Modifica la variable estática "idProveedor"
     * 
     * @param idProveedorRegistrado
     */
    public static void setIdProveedor(String idProveedorRegistrado){
    	idProveedor = idProveedorRegistrado;
    }
    
    /**
     * Modifica la variable estática "idCliente"
     * 
     * @param idClienteRegistrado
     */
    public static void setIdCliente(String idClienteRegistrado){
    	idCliente = idClienteRegistrado;
    }
    
    /*
     * Método que actualiza el label "Nombre proveedor" justo después de registrarlo
     * en la ventana "Interfaz_RegistrarProveedor" quien es la que lo llama.
     * 
     * @param nombreProveedor
     */
    /*public void actualizarLabelNombreProveedor(String nombreProveedor){
    	this.lblRegistrarProveedor_compra.setText(nombreProveedor);
    }*/
    
    private void jTextField1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextField1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextField1ActionPerformed

    private void jTextField2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextField2ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextField2ActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jTextField7ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextField7ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextField7ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Interfaz.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Interfaz.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Interfaz.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Interfaz.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
            	Interfaz nuevo = new Interfaz(idvendedor, isadmin);
            	nuevo.setVisible(true);
                //new Interfaz().setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAgregarProducto_Venta;
    private javax.swing.JButton btnRealizarVenta;
    private javax.swing.JButton btnConsultarProducto_Inventario;
    private javax.swing.JDesktopPane jDesktopPane1;
    private javax.swing.JLabel lblIdProducto_Venta;
    private javax.swing.JLabel lblNombreProducto_Inventario;
    private javax.swing.JLabel lblVentas_Contabilidad;
    private javax.swing.JLabel lblCompra_Contabilidad;
    private javax.swing.JLabel lblCantidad_Venta;
    private javax.swing.JLabel lblProductosAVender;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JMenuItem jMenuItem2;
    private javax.swing.JMenuItem jMenuItem3;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel panelVenta;
    private javax.swing.JPanel panelCompra;
    private javax.swing.JPanel panelInventario;
    private javax.swing.JPanel panelContabilidad;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPaneVenta;
    private javax.swing.JScrollPane jScrollPaneInventario;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JTabbedPane panelContenedor;
    private javax.swing.JTable jTable1;
    private javax.swing.JTable jTableVenta;
    private javax.swing.JTable jTableInventario;
    private javax.swing.JTable jTable5;
    private javax.swing.JTextField tfIdProducto_Venta;
    private javax.swing.JTextField tfCantidad_Venta;
    private javax.swing.JTextField tfNombreProducto_Inventario;
    private JTextField tfIdProducto_Compra;
    private JTextField tfCantidad_Compra;
    private JScrollPane jScrollPaneCompra;
    private JTable jTableCompra;
    private JTextField tfValorTotal_Venta;
    private JTextField tfValorTotal_Compra;
    private JLabel lblValorTotal_Compra;
    private JTextField tfValorCancelado_Compra;
    private JLabel lblValorCancelado_Compra;
    private JLabel lblVenta_venta;
    private JLabel lblCompra_compra;
    private JTextField tfPrecioUnidad_Compra;
    private JTextField tfFechaVencimiento_Compra;
    private JLabel lblRealizarConsulta;
    private JLabel lblConsultar;
	private DefaultTableModel modelo;
	private DefaultTableModel modeloCompra;
	private DefaultTableModel modeloVenta;
	private JTable jTableVentas_Contabilidad;
	private JTable jTableCompras_Contabilidad;
}
